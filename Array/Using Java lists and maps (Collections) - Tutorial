1. Java Collections
The Java language supports arrays to store several objects. An array is initialized with an predefined size during instantiation. To support more flexible data structures the core Java library provides the collection framework. A collection is a data structure which contains and processes a set of data. The data stored in the collection is encapsulated and the access to the data is only possible via predefined methods. For example the developer can add elements to an collection via a method. Collections use internally arrays for there storage but hide the complexity of managing the dynamic size from the developer.

For example if your application saves data in an object of type People, you can store several People objects in a collection

2. List implementations
2.1. The List interface
The List interface is the base interface for collections which allows to store objects in a resizable container.

2.2. ArrayList and LinkedList as implementations
ArrayList is an implementation of this interface and allow that elements are dynamically added and removed from the list. If more elements are added to ArrayList than its initial size, its size is increased dynamically. The elements in an ArrayList can be accessed directly and efficiently by using the get() and set() methods, since ArrayList is implemented based on an array. ArrayList is typically used in implementations as implementation class for the List interface.

LinkedList is implemented as a double linked list. Its performance on add() and remove() is better than the performance of Arraylist. The get() and set() methods have worse performance than the ArrayList, as the LinkedList does not provide direct access to its members.

The following code demonstrates the usage of List and ArrayList

2.3. Sorting lists
You can sort lists using their natural order of via lambdas for defining the Comparator.compare(). Typically in Java 8 you use a lambda expression or a method reference for the definion of the compare method.

2.4. Remove list members based on condition
The removeIf method allows to remove list items based on a condition.